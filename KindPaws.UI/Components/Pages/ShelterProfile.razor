@page "/shelter/{ShelterId:int}"
@using KindPaws.Core.OutputModels
@rendermode InteractiveServer
@inject IDialogService DialogService
<MudDialogProvider/>
<MudLayout Style="background-color: var(--mud-palette-surface); width: 100%; max-height: 100rem">
    <MainAppBar/>
    @if (isLoading)
    {
        <MudSkeleton Width="100%" Height="20px" Animation="Animation.Pulse" />
        <MudSkeleton Width="80%" Height="20px" Animation="Animation.Pulse" />
    }
    else
    {
        <MudMainContent Style="height: 80rem">
        <MudGrid>
            <MudItem xs="3" >
                <MudImage Class="kp-bordered-b" Alt="Logo" Src="@($"images/shelterLogos/{ShelterId}.png")" Style="border-radius: 50px; width: 16rem; height: 16rem; margin-left: 50%; margin-top: 5%"/>
            </MudItem>
            <MudItem xs="9">
                <MudPaper Class="kp-bordered-b" Style="background-color: var(--mud-palette-secondary); margin-left: 1.5%; margin-top: 1.5%; width: 80%; height: 30%; justify-content: center; display: flex">
                    <MudText Class="kp-all-text" Typo="Typo.h6" Align="Align.Center" Style="display: flex; align-items: center">@_name</MudText>
                </MudPaper>
                <MudGrid>
                    <MudItem xs="6">
                        <MudPaper Class="kp-bordered-b" Style="background-color: var(--mud-palette-secondary); margin-left: 3%; margin-top: 1.5%; width: 52rem; height: 10rem; display: flex; justify-content: center">
                            <MudText Class="kp-all-text" Align="Align.Center" Style="display: flex; align-items: center; text-wrap: wrap">@_description</MudText>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="6" Style="display: flex; align-items: baseline; justify-content: center; gap: 1rem; flex-direction: column">
                        <MudChip T="int" @onclick="OpenFeedbackDialog" Color="Color.Tertiary" Icon="@Icons.Material.Filled.Star" IconColor="Color.Error" Style="width: 18.5rem; height: 4.3rem; display: flex; align-items: center; justify-content: center; margin-left: 20%; border: 2px solid black">
                            <MudText Class="kp-all-text">@shelterRating.ToString("F1")</MudText>
                        </MudChip>
                        <MudButton @onclick="OpenFeedbackLeavingDialog" Variant="Variant.Filled" Color="Color.Tertiary" Style="width: 18.5rem; height: 4.3rem; border-radius: 15px; border: 2px solid black">
                            <MudText Class="kp-all-text">Оставить отзыв</MudText>
                        </MudButton>
                    </MudItem>
                </MudGrid>


            </MudItem>
        </MudGrid>
        <MudDivider Style="background-color: black; height: 2px"/>
        @* <div style="height: 2px; background-color: black"></div> *@
        <MudStack Spacing="6">
            <div style="display: flex; justify-content: center">
                <MudCard Class="kp-bordered-b" Style="background-color: var(--mud-palette-primary); width: 90%; height: 10rem; border-radius: 20px; margin-top: .5%">
                    <MudCardHeader>
                        <MudText Typo="Typo.h5">
                            @_fundName
                        </MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudStack Row="true">
                            <MudStack Row="false" Spacing="2">
                                <div style="display: flex; justify-content: space-between; flex-direction: row; align-content: start;">
                                    <MudText Class="kp-all-text" Style="display: flex; align-self: start">@fundraiserProgressValue%</MudText>
                                    <MudText Class="kp-all-text" Style="display: flex; align-self: end">@currentFundraiserCollected&#8381/@currentFundraiserNeeds&#8381</MudText>
                                </div>
                                <MudProgressLinear Value="@fundraiserProgressValue" Striped="true" Color="Color.Success" Style="width: 83rem; height: 1rem"></MudProgressLinear>
                            </MudStack>
                            <MudButton Variant="Variant.Filled" Color="Color.Tertiary" Style="width: 30rem; height: 8rem; margin-top: -4%; border-radius: 20px; border: 2px solid black">
                                <MudText Typo="Typo.h3" Class="kp-all-text">ПОДДЕРЖАТЬ</MudText>
                            </MudButton>
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            </div>
            <div style="display: flex; justify-content: center">
                <MudCard Class="kp-bordered-b" Style="display: flex; width: 90%; height: 40rem; background-color: var(--mud-palette-primary); border-radius: 35px">
                    <MudStack Row="true" Spacing="5">
                        <MudCard Class="kp-bordered-b" Style="display: flex; text-align: center; background-color: var(--mud-palette-secondary); width: 20rem; height: 38.5rem; margin-left: .5%; margin-top: .5%; border-radius: 20px">
                            <MudText Typo="Typo.h6" Class="kp-all-text">
                                ФИЛЬТРЫ
                            </MudText>
                        </MudCard>
                        <MudStack Spacing="3">
                            @foreach (var animal in animals)
                            {
                                <InShelterAnimalCard Name="@animal.Name"/>
                            }
                        </MudStack>
                    </MudStack>
                </MudCard>
            </div>
        </MudStack>
    </MudMainContent>
    }
    <PageFooterInfo/>
</MudLayout>

@* <MudPaper Style="background-color: var(--mud-palette-surface)" Width="100%" Height="100rem"> *@
@*      *@
@*          *@
@*      *@
@* </MudPaper> *@
@code {
    private decimal currentFundraiserNeeds;
    private decimal currentFundraiserCollected;
    private double shelterRating = 5.0;
    private double fundraiserProgressValue;

    private string _name;
    private string _fundName;
    private string _description;

    private List<AnimalForShelterOutputModel> animals;
    
    
    [Parameter]
    public int ShelterId { get; set; }

    private bool isLoading = true;
    protected override Task OnInitializedAsync()
    {
        return Init();
    }


    private async Task Init()
    {
        var shelter = await Program.ShelterManager.GetShelterByIdAsync(ShelterId);
        var fundraiser = await Program.FundraiserManager.GetCurrentShelterFundraiserByIdAsync(ShelterId);
        _fundName = fundraiser.Name;
        currentFundraiserNeeds = fundraiser.Needs;
        currentFundraiserCollected = fundraiser.Collected;
        fundraiserProgressValue = (double)((currentFundraiserCollected / currentFundraiserNeeds) * 100);
        var gotAnimals = await Program.AnimalManager.GetAllAnimalsInShelterAsync(ShelterId);
        animals = gotAnimals;
        _name = shelter.Name;
        _description = shelter.Description;
        isLoading = false;
    }

    private Task OpenFeedbackDialog()
    {
        var options = new DialogOptions
        {
            CloseButton = true,
            CloseOnEscapeKey = true,
        };
        return DialogService.ShowAsync<FeedbackDialog>("Отзывы", options);
    }

    private Task OpenFeedbackLeavingDialog()
    {
        var options = new DialogOptions
        {
            CloseButton = true
        };
        var parameters = new DialogParameters
        {
            { "ShelterId", ShelterId }
        };
        return DialogService.ShowAsync<LeaveFeedbackDialog>("Оставить отзыв", parameters, options);
    }
    private void TestOtziv()
    {
        Console.WriteLine("CLICKED");
        // Console.WriteLine($"{currentFundraiserNeeds}");
    }

}