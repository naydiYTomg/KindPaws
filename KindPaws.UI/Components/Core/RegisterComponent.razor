@using System.Security.Claims
@using System.Security.Cryptography
@using System.Text
@using KindPaws.Core.InputModels
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies

@inject NavigationManager Navigation

<MudCard Class="kp-bordered-b" Style="background-color: var(--mud-palette-primary); display: flex; align-items: center; width: 30rem; height: 30rem">
    <MudCardHeader>
        <MudText Class="kp-all-text" Typo="Typo.h4">Регистрация</MudText>
    </MudCardHeader>
    <MudCardContent>
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <MudText Typo="Typo.h4" Class="kp-all-text" Style="color: darkred">@ErrorMessage</MudText>
        }
        <EditForm Model="_model" OnValidSubmit="HandleRegister" FormName="RegisterForm">
            <DataAnnotationsValidator/>
            <InputText @bind-Value="_model.Login"/>
            <InputText @bind-Value="_model.Password"/>
            <InputText @bind-Value="_model.Name"/>
            <InputText @bind-Value="_model.Surname"/>
            @* <MudTextField Class="kp-all-text" Style="font-size: 20px;" AutoGrow="true" Typo="Typo.h4" Label="Логин" ShrinkLabel="true" @bind-Value="_model.Login" For="@(() => _model.Login)"/> *@
            @* <MudTextField Class="kp-all-text" Style="font-size: 20px;" AutoGrow="true" Typo="Typo.h4" Label="Пароль" ShrinkLabel="true" @bind-Value="_model.Password" For="@(() => _model.Password)"/> *@
            @* <MudTextField Class="kp-all-text" Style="font-size: 20px;" AutoGrow="true" Typo="Typo.h4" Label="Имя" ShrinkLabel="true" @bind-Value="_model.Name" For="@(() => _model.Name)"/> *@
            @* <MudTextField Class="kp-all-text" Style="font-size: 20px;" AutoGrow="true" Typo="Typo.h4" Label="Фамилия" ShrinkLabel="true" @bind-Value="_model.Surname" For="@(() => _model.Surname)"/> *@
            <br/>
            <MudButton ButtonType="ButtonType.Submit" Size="Size.Large" Style="background-color: var(--mud-palette-tertiary)">Зарегистрироваться</MudButton>
        </EditForm>
    </MudCardContent>
</MudCard>

@code {

    private string ErrorMessage = "";
    [SupplyParameterFromForm]
    public UserRegisteringInputModel _model { get; set; } = new();
    [CascadingParameter]
    private HttpContext httpContext { get; set; }

    public async Task HandleRegister()
    {
        // Console.WriteLine($"LOGIN: {_model.Login}");
        // Console.WriteLine("WWW");
        _model.Login = _model.Login.ToLower().Trim();
        if (!await Program.UserManager.IsLoginFree(_model.Login))
        {
            ErrorMessage = $"Логин {_model.Login} уже занят!";
            return;
        }

        await Program.UserManager.InsertUserRegisterAsync(_model);
        var claims = new List<Claim>
        {
            new(ClaimTypes.GivenName, _model.Login),
            new(ClaimTypes.Role, "Пользователь"),
            new(ClaimTypes.Name, _model.Name),
            new(ClaimTypes.Surname, _model.Surname)
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var pr = new ClaimsPrincipal(identity);
        
        await httpContext.SignInAsync(pr);
        Navigation.NavigateTo("/");
    }
}