@using System.Security.Cryptography
@using System.Text
@using KindPaws.Core.InputModels
@using Microsoft.AspNetCore.Identity
@rendermode InteractiveServer
@inject NavigationManager Navigation

<MudCard Class="kp-bordered-b" Style="background-color: var(--mud-palette-primary); display: flex; align-items: center; width: 30rem; height: 30rem">
    <MudCardHeader>
        <MudText Class="kp-all-text" Typo="Typo.h4">Вход</MudText>
    </MudCardHeader>
    <MudCardContent>
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <MudText Typo="Typo.h4" Class="kp-all-text" Style="color: darkred">@ErrorMessage</MudText>
        }
        <EditForm Model="_model" OnValidSubmit="HandleLogin" FormName="LoginForm">
            <DataAnnotationsValidator/>
            <MudTextField Class="kp-all-text" Style="font-size: 20px;" AutoGrow="true" Typo="Typo.h4" Label="Логин" ShrinkLabel="true" @bind-Value="_model.Login"/>
            <ValidationMessage For="() => _model.Login"/>
            <MudTextField Class="kp-all-text" Style="font-size: 20px;" AutoGrow="true" Typo="Typo.h4" Label="Пароль" ShrinkLabel="true" @bind-Value="_rawPassword"/>
            <ValidationMessage For="() => _model.Password"></ValidationMessage>
            <br/>
            <MudButton ButtonType="ButtonType.Submit" Size="Size.Large" Style="background-color: var(--mud-palette-tertiary)">Войти</MudButton>
        </EditForm>
    </MudCardContent>
</MudCard>

@code {

    private string ErrorMessage;
    private UserLoginInputModel _model = new();

    private string _rawPassword;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        isLoading = true;
        var enc = Shake256.HashData(Encoding.UTF8.GetBytes(_rawPassword), _rawPassword.Length);
        _model.Password = enc;
        if (await Program.UserManager.IsLoginFree(_model.Login))
        {
            ErrorMessage = $"Не найден пользователь с логином {_model.Login}";
            return;
        }

        var user = await Program.UserManager.GetUserByLoginAsync(_model.Login);
        if (!user!.Password.SequenceEqual(enc))
        {
            // foreach (var (f, s) in enc.Zip(user.Password))
            // {
            //     Console.WriteLine($"{f} :: {s}");
            // }
            ErrorMessage = "Пароль не совпадает";
            return;
        }

        Program.CurrentUser = new UserRegisteringInputModel { Name = user.Name, Surname = user.Surname, Login = _model.Login, Password = enc };
        Navigation.NavigateTo("/");
        

    }
}