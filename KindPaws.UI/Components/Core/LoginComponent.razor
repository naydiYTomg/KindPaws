@using System.Security.Claims
@using System.Security.Cryptography
@using System.Text
@using KindPaws.Core.InputModels
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Identity
@inject NavigationManager Navigation

<MudCard Class="kp-bordered-b" Style="background-color: var(--mud-palette-primary); display: flex; align-items: center; width: 30rem; height: 30rem">
    <MudCardHeader>
        <MudText Class="kp-all-text" Typo="Typo.h4">Вход</MudText>
    </MudCardHeader>
    <MudCardContent>
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <MudText Typo="Typo.h4" Class="kp-all-text" Style="color: darkred">@ErrorMessage</MudText>
        }
        <EditForm Model="_model" OnSubmit="HandleLogin" FormName="LoginForm">
            @* <DataAnnotationsValidator/> *@
            @* <InputText @bind-Value="_model.Login"/> *@
            <InputText @bind-Value="_model.Login"/>
            <InputText @bind-Value="_model.Password"/>
            <br/>
            <MudButton ButtonType="ButtonType.Submit" Size="Size.Large" Style="background-color: var(--mud-palette-tertiary)">Войти</MudButton>
        </EditForm>
    </MudCardContent>
</MudCard>

@code {

    private string ErrorMessage;
    private UserLoginInputModel _model = new();
    
    
    [CascadingParameter]
    public HttpContext httpContext { get; set; }

    private async Task HandleLogin()
    {
        Console.WriteLine("ASDSDDD");
        _model.Login = _model.Login.ToLower().Trim();
        if (await Program.UserManager.IsLoginFree(_model.Login))
        {
            ErrorMessage = "Неверный логин или пароль";
            return;
        }

        var user = await Program.UserManager.GetUserByLoginAsync(_model.Login);
        if (!await Program.UserManager.CheckPassword(user, _model.Password))
        {
            ErrorMessage = "Неверный логин или пароль";
            return;
        }

        var claims = new List<Claim>
        {
            new(ClaimTypes.GivenName, _model.Login),
            new(ClaimTypes.Role, user.Role.Name!),
            new(ClaimTypes.Name, user.Name),
            new(ClaimTypes.Surname, user.Surname)
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var pr = new ClaimsPrincipal(identity);
        
        await httpContext.SignInAsync(pr);
        Navigation.NavigateTo("/");
        

    }
}